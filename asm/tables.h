#define ENUM_STR_ENTRY(e) [e] = #e

char* tok_to_str[] =
{
	ENUM_STR_ENTRY(TOK_ERROR),
	ENUM_STR_ENTRY(TOK_EOL),
	ENUM_STR_ENTRY(TOK_EOF),
	ENUM_STR_ENTRY(TOK_COMMA),
	ENUM_STR_ENTRY(TOK_UNDEFINED),
	ENUM_STR_ENTRY(TOK_LABLE),
	ENUM_STR_ENTRY(TOK_DIRECTIVE),
	ENUM_STR_ENTRY(TOK_LITERAL),
	ENUM_STR_ENTRY(TOK_IDENTIFIER),
};

char* err_to_str[] =
{
	ENUM_STR_ENTRY(ERR_FILE_INPUT),
	ENUM_STR_ENTRY(ERR_UNEXPECTED_CHAR),
	ENUM_STR_ENTRY(ERR_INT_OVERFLOW),
};

char* lit_to_str[] =
{
	ENUM_STR_ENTRY(LIT_DEC),
	ENUM_STR_ENTRY(LIT_HEX),
	ENUM_STR_ENTRY(LIT_BIN),
	ENUM_STR_ENTRY(LIT_CHR),
	ENUM_STR_ENTRY(LIT_STR),
};

typedef enum
{
	DIR_ALIGN, DIR_SECTION, DIR_TEXT, DIR_DATA, DIR_RODATA, DIR_BSS,
	DIR_STRING, DIR_ASCIZ,
	DIR_EQU, DIR_OPTION, DIR_BYTE,
	DIR_2BYTE, DIR_HALF, DIR_SHORT,
	DIR_4BYTE, DIR_WORD, DIR_QUAD,
	DIR_ZERO,
	DIR_ORG,
	DIR_LC, // Location Counter
} Directives;

typedef enum
{
	INST_ADD, INST_SUB, INST_SLL, INST_SLT, INST_SLTU, INST_XOR, INST_SRL, INST_SRA,
	INST_OR, INST_AND
} RType;

typedef enum
{
	INST_LB, INST_LH, INST_LW, INST_LBU, INST_LHU,
	INST_ADDI, INST_SLTI, INST_SLTIU, INST_XORI, INST_ORI, INST_ANDI,
} IType;
